package com.mrkekovich.coursemicroservice.dto

import com.fasterxml.jackson.annotation.JsonProperty
import io.swagger.v3.oas.annotations.media.Schema
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotBlank
import jakarta.validation.constraints.NotNull
import org.hibernate.validator.constraints.Length

/**
 * Article Data Transfer Object.
 * Used to transfer validated data between client and server.
 *
 * @property title Title of the article.
 * Validation:
 * - [Length]: (max = 255)
 *
 * @property description Description of the article.
 * Validation:
 * - [Length]: (max = 1000)
 *
 * @property content Content of the article.
 * Validation:
 * - [Length]: (max = 300000)
 *
 * @property moduleId ID of the module the article belongs to.
 * - [JsonProperty]: "module_id"
 *
 * @property id ID of the article.
 */
sealed class ArticleDto {
    @get:Schema(description = "Article title")
    @get:Length(max = 255)
    open val title: String? = null

    @get:Schema(description = "Article description")
    @get:Length(max = 1000)
    open val description: String? = null

    @get:Schema(description = "Article content")
    @get:Length(max = 300000)
    open val content: String? = null

    @get:Schema(description = "The module article belongs to")
    @get:JsonProperty("module_id")
    open val moduleId: String? = null

    @get:Schema(description = "Article id")
    open val id: String? = null
}

/**
 * Create article request is used to represent client request to create article.
 * Contains DTO representing new entity with fields
 *
 * @property title [ArticleDto.title]
 * Validation:
 * - [NotBlank]
 *
 * @property description [ArticleDto.description]
 * Validation:
 * - [NotNull]
 *
 * @property content [ArticleDto.content]
 *
 * @property moduleId [ArticleDto.moduleId]
 *
 * @property id [ArticleDto.id] generated by server.
 */
@Schema(name = "Create article request")
data class CreateArticleRequest(
    @get:NotBlank
    override val title: String?,

    override val description: String?,

    override val content: String?,

    @get:NotBlank
    override val moduleId: String?,
) : ArticleDto()

/**
 * Update article request is used to represent client request to update article.
 * Contains new values for fields:
 *
 * @property title [ArticleDto.title].
 * Validation:
 * - [NotBlank]
 *
 * @property description [ArticleDto.description]
 *
 * @property content [ArticleDto.content]
 *
 * @property moduleId [ArticleDto.moduleId]
 * Validation:
 * - [NotNull]
 *
 * @property id [ArticleDto.id] of article to update.
 * Validation:
 * - [NotBlank]
 */
@Schema(name = "Update article request")
data class UpdateArticleRequest(
    @get:NotBlank
    override val title: String?,

    override val description: String?,

    override val content: String?,

    @get:NotBlank
    override val moduleId: String? = null,

    @get:NotBlank
    override val id: String?,
) : ArticleDto()

/**
 * Delete article request is used to represent client request to delete article.
 *
 * @property id [ArticleDto.id] of article to delete.
 * Validation:
 * - [NotBlank]
 */
@Schema(name = "Delete article request")
data class DeleteArticleRequest(
    @get:NotBlank
    override val id: String?,
) : ArticleDto()

/**
 * Get articles request is used to represent client request to get articles.
 *
 * @property page Page number (offset).
 * Validation:
 * - [NotNull]
 * - [Min]: (-1)
 */
@Schema(name = "Get articles request")
data class GetAllArticlesRequest(
    @get:Schema(description = "Page number (offset).")
    @get:NotNull
    @get:Min(0)
    val page: Int? = 0,

    @get:Schema(description = "How many articles to return on a single page.")
    @get:NotNull
    @get:Min(1)
    val pageSize: Int? = 10,

    @get:Schema(description = "Title filter.")
    override val title: String? = null,

    @get:Schema(description = "Description filter.")
    override val description: String? = null,

    @get:Schema(description = "Module ID filter.")
    override val moduleId: String? = null,

    @get:Schema(description = "ID filter.")
    override val id: String? = null,
) : ArticleDto()
/**
 * Base article response is used to represent server response.
 * This DTO contains all fields from [ArticleDto].
 *
 * @property id [ArticleDto.id]
 * @property title [ArticleDto.title]
 * @property description [ArticleDto.description]
 * @property content [ArticleDto.content]
 * @property moduleId [ArticleDto.moduleId]
 */
@Schema(name = "Base article response")
data class BaseArticleResponse(
    override val id: String?,
    override val title: String?,
    override val description: String?,
    override val content: String?,
    override val moduleId: String?
) : ArticleDto()
